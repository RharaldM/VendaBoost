import type { BrowserContext, Page } from 'playwright';
import { t } from '../utils/i18n.js';
import { wait, waitWithLog, info, warn, error, debug } from '../logger.js';
import * as path from 'node:path';
import * as fs from 'node:fs';

/**
 * Interface para dados do an√∫ncio
 */
export interface ListingData {
  title: string;
  price: string | number;
  description: string;
  images?: string[];
  category?: string;
  condition?: string;
  location?: string;
}

/**
 * Classe para automa√ß√£o do Facebook Marketplace
 */
export class MarketplaceAutomation {
  private page: Page;
  private throttleMs: number;

  constructor(page: Page, throttleMs: number = 350) {
    this.page = page;
    this.throttleMs = throttleMs;
  }

  /**
   * Cria um novo an√∫ncio no Marketplace
   */
  async createListing(data: ListingData): Promise<void> {
    try {
      info('Iniciando cria√ß√£o de an√∫ncio no Marketplace...');
      
      // Aguardar p√°gina carregar completamente
      await this.page.waitForLoadState('domcontentloaded');
      await wait(1000);

      // Tentar encontrar e clicar no bot√£o de criar an√∫ncio
      await this.clickCreateButton();

      // Preencher campos do formul√°rio na ordem: t√≠tulo, pre√ßo, categoria
      await this.fillTitle(data.title);
      await this.fillPrice(data.price);
      
      // Selecionar categoria logo ap√≥s o pre√ßo
      if (data.category) {
        info(`üè∑Ô∏è Selecionando categoria: ${data.category}`);
        await this.selectCategory(data.category);
      } else {
        info('‚ö†Ô∏è Campo category n√£o encontrado no flow.json');
      }
      
      // Selecionar condi√ß√£o logo ap√≥s a categoria
      if (data.condition) {
        info(`üîß Selecionando condi√ß√£o: ${data.condition}`);
        await this.selectCondition(data.condition);
      } else {
        info('‚ö†Ô∏è Campo condition n√£o encontrado no flow.json ou est√° vazio');
      }
      
      await this.fillDescription(data.description);

      // Upload de imagens se fornecidas
      if (data.images && data.images.length > 0) {
        await this.uploadImages(data.images);
      }

      // Configurar disponibilidade
      await this.selectAvailability();

      // Configurar localiza√ß√£o
      if (data.location) {
        await this.selectLocation(data.location);
      }

      info('Formul√°rio de an√∫ncio preenchido com sucesso');
    } catch (err) {
      error('Erro ao criar an√∫ncio:', err);
      throw new Error(`Falha na cria√ß√£o do an√∫ncio: ${err}`);
    }
  }

  /**
   * Clica no bot√£o de criar an√∫ncio/listing
   */
  private async clickCreateButton(): Promise<void> {
    debug('Procurando bot√£o de criar an√∫ncio...');
    
    // M√∫ltiplas estrat√©gias para encontrar o bot√£o
    const strategies = [
      () => this.page.getByRole('button', { name: t.buttons.createListing }),
      () => this.page.getByText(t.buttons.createListing).first(),
      () => this.page.locator('button').filter({ hasText: t.buttons.createListing }),
      () => this.page.locator('[data-testid*="create"]').filter({ hasText: /criar|create/i }),
    ];

    for (const strategy of strategies) {
      try {
        const button = strategy();
        if (await button.isVisible({ timeout: 2000 })) {
          await button.scrollIntoViewIfNeeded();
          await wait(100);
          await button.click();
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s clicar em criar an√∫ncio');
          debug('Bot√£o de criar an√∫ncio clicado com sucesso');
          return;
        }
      } catch (err) {
        debug('Estrat√©gia falhou, tentando pr√≥xima...');
      }
    }

    warn('Bot√£o de criar an√∫ncio n√£o encontrado - pode j√° estar na p√°gina de cria√ß√£o');
  }

  /**
   * Preenche o campo de t√≠tulo
   */
  private async fillTitle(title: string): Promise<void> {
    debug('Preenchendo t√≠tulo do an√∫ncio...');
    
    const strategies = [
      () => this.page.getByRole('textbox', { name: 'T√≠tulo' }),
      () => this.page.getByLabel(t.labels.title),
      () => this.page.getByPlaceholder(t.labels.title),
      () => this.page.locator('input[name*="title"]'),
      () => this.page.locator('input').filter({ hasText: t.labels.title }),
      () => this.page.locator('textarea').filter({ hasText: t.labels.title }),
    ];

    for (const strategy of strategies) {
      try {
        const field = strategy().first();
        if (await field.isVisible({ timeout: 3000 })) {
          await field.scrollIntoViewIfNeeded();
          await wait(150);
          await field.click();
          await field.fill(title);
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s preencher t√≠tulo');
          info(`T√≠tulo preenchido: "${title}"`);
          return;
        }
      } catch (err) {
        debug('Estrat√©gia de t√≠tulo falhou, tentando pr√≥xima...');
      }
    }

    throw new Error('Campo de t√≠tulo n√£o encontrado');
  }

  /**
   * Preenche o campo de pre√ßo
   */
  private async fillPrice(price: string | number): Promise<void> {
    debug('Preenchendo pre√ßo do an√∫ncio...');
    
    const priceStr = typeof price === 'number' ? price.toString() : price;
    
    const strategies = [
      () => this.page.getByRole('textbox', { name: 'Pre√ßo' }),
      () => this.page.getByLabel(t.labels.price),
      () => this.page.getByPlaceholder(t.labels.price),
      () => this.page.locator('input[name*="price"]'),
      () => this.page.locator('input[type="number"]'),
      () => this.page.locator('input').filter({ hasText: t.labels.price }),
    ];

    for (const strategy of strategies) {
      try {
        const field = strategy().first();
        if (await field.isVisible({ timeout: 3000 })) {
          await field.scrollIntoViewIfNeeded();
          await wait(150);
          await field.click();
          await field.fill(priceStr);
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s preencher pre√ßo');
          info(`Pre√ßo preenchido: "${priceStr}"`);
          return;
        }
      } catch (err) {
        debug('Estrat√©gia de pre√ßo falhou, tentando pr√≥xima...');
      }
    }

    throw new Error('Campo de pre√ßo n√£o encontrado');
  }

  /**
   * Preenche o campo de descri√ß√£o
   */
  private async fillDescription(description: string): Promise<void> {
    debug('Preenchendo descri√ß√£o do an√∫ncio...');
    
    const strategies = [
      () => this.page.getByRole('textbox', { name: 'Descri√ß√£o' }),
      () => this.page.locator('textarea[placeholder*="Descri√ß√£o"]'),
      () => this.page.locator('textarea[placeholder*="descri√ß√£o"]'),
      () => this.page.locator('textarea[aria-label*="Descri√ß√£o"]'),
      () => this.page.locator('textarea[aria-label*="descri√ß√£o"]'),
      () => this.page.locator('div[contenteditable="true"][aria-label*="Descri√ß√£o"]'),
      () => this.page.locator('div[contenteditable="true"][aria-label*="descri√ß√£o"]'),
      // Estrat√©gias mais gen√©ricas
      () => this.page.locator('textarea').first(),
      () => this.page.locator('div[contenteditable="true"]').first(),
      () => this.page.locator('[role="textbox"]').first(),
      () => this.page.locator('textarea[placeholder*="Tell"]'),
      () => this.page.locator('textarea[placeholder*="Conte"]'),
      () => this.page.locator('textarea[placeholder*="Descreva"]'),
      () => this.page.locator('div[contenteditable="true"][data-text*="true"]'),
      () => this.page.locator('div[contenteditable="true"][aria-multiline="true"]'),
      // Fallbacks mais amplos
      () => this.page.getByLabel(t.labels.description),
      () => this.page.getByPlaceholder(t.labels.description),
      () => this.page.locator('textarea[name*="description"]'),
      () => this.page.locator('textarea').filter({ hasText: t.labels.description }),
      () => this.page.locator('div[contenteditable="true"]').filter({ hasText: t.labels.description }),
    ];

    for (const strategy of strategies) {
      try {
        const field = strategy().first();
        if (await field.isVisible({ timeout: 3000 })) {
          await field.scrollIntoViewIfNeeded();
          await wait(100);
          await field.click();
          await wait(500);
          await field.fill(description);
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s preencher descri√ß√£o');
          info(`Descri√ß√£o preenchida (${description.length} caracteres)`);
          return;
        }
      } catch (err) {
        debug('Estrat√©gia de descri√ß√£o falhou, tentando pr√≥xima...');
      }
    }

    // Debug: listar elementos dispon√≠veis
    try {
      debug('Listando elementos de texto dispon√≠veis na p√°gina...');
      const textareas = await this.page.locator('textarea').count();
      const editableDivs = await this.page.locator('div[contenteditable="true"]').count();
      const textboxes = await this.page.locator('[role="textbox"]').count();
      debug(`Encontrados: ${textareas} textareas, ${editableDivs} divs edit√°veis, ${textboxes} textboxes`);
      
      // Tentar pegar qualquer textarea vis√≠vel
      const anyTextarea = this.page.locator('textarea').first();
      if (await anyTextarea.isVisible({ timeout: 2000 })) {
        debug('Tentando usar primeira textarea encontrada...');
        await anyTextarea.scrollIntoViewIfNeeded();
         await wait(100);
        await anyTextarea.click();
        await wait(500);
        await anyTextarea.fill(description);
        await waitWithLog(this.throttleMs, 'Aguardando ap√≥s preencher descri√ß√£o');
        info(`Descri√ß√£o preenchida em textarea gen√©rica (${description.length} caracteres)`);
        return;
      }
      
      // Tentar pegar qualquer div edit√°vel vis√≠vel
      const anyEditableDiv = this.page.locator('div[contenteditable="true"]').first();
      if (await anyEditableDiv.isVisible({ timeout: 2000 })) {
        debug('Tentando usar primeira div edit√°vel encontrada...');
        await anyEditableDiv.scrollIntoViewIfNeeded();
         await wait(100);
        await anyEditableDiv.click();
        await wait(500);
        await anyEditableDiv.fill(description);
        await waitWithLog(this.throttleMs, 'Aguardando ap√≥s preencher descri√ß√£o');
        info(`Descri√ß√£o preenchida em div edit√°vel gen√©rica (${description.length} caracteres)`);
        return;
      }
    } catch (debugErr) {
      debug('Erro durante debug de elementos:', debugErr);
    }

    warn('Campo de descri√ß√£o n√£o encontrado - continuando sem descri√ß√£o');
  }

  /**
   * Faz upload de imagens
   */
  private async uploadImages(imagePaths: string[]): Promise<void> {
    info(`üì∑ [UPLOAD] Iniciando upload de ${imagePaths.length} imagens...`);
    info(`üì∑ [UPLOAD] Caminhos recebidos: ${imagePaths.join(', ')}`);
    
    // Validar se os arquivos existem
    const validPaths = imagePaths.filter((imagePath, index) => {
      const fullPath = path.resolve(imagePath);
      info(`üì∑ [UPLOAD] Validando imagem ${index + 1}/${imagePaths.length}: ${imagePath}`);
      info(`üì∑ [UPLOAD] Caminho absoluto: ${fullPath}`);
      
      if (!fs.existsSync(fullPath)) {
        warn(`üì∑ [UPLOAD] ‚ùå Imagem n√£o encontrada: ${imagePath}`);
        warn(`üì∑ [UPLOAD] ‚ùå Caminho absoluto testado: ${fullPath}`);
        return false;
      }
      
      // Verificar tamanho do arquivo
      try {
        const stats = fs.statSync(fullPath);
        const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        info(`üì∑ [UPLOAD] ‚úÖ Imagem v√°lida encontrada: ${fullPath}`);
        info(`üì∑ [UPLOAD] ‚úÖ Tamanho do arquivo: ${fileSizeMB} MB`);
        return true;
      } catch (err) {
        warn(`üì∑ [UPLOAD] ‚ùå Erro ao verificar arquivo: ${fullPath}`, err);
        return false;
      }
    });

    info(`üì∑ [UPLOAD] Resultado da valida√ß√£o: ${validPaths.length}/${imagePaths.length} imagens v√°lidas`);
    
    if (validPaths.length === 0) {
      warn('üì∑ [UPLOAD] ‚ùå Nenhuma imagem v√°lida encontrada para upload');
      return;
    }
    
    info(`üì∑ [UPLOAD] Imagens v√°lidas para upload: ${validPaths.join(', ')}`);

    try {
      // Estrat√©gia 1: Procurar bot√£o "Adicionar fotos" e clicar nele primeiro
      info('üì∑ [UPLOAD] üîç Estrat√©gia 1: Procurando bot√£o "Adicionar fotos"...');
      const addPhotosButton = this.page.locator('div[aria-label*="Adicionar fotos"], div[aria-label*="Add photos"], div[role="button"]:has-text("Adicionar fotos"), div[role="button"]:has-text("Add photos")').first();
      
      const buttonCount = await addPhotosButton.count();
      info(`üì∑ [UPLOAD] Bot√µes "Adicionar fotos" encontrados: ${buttonCount}`);
      
      if (await addPhotosButton.isVisible({ timeout: 3000 })) {
        info('üì∑ [UPLOAD] ‚úÖ Bot√£o "Adicionar fotos" encontrado e vis√≠vel, clicando...');
        await addPhotosButton.click();
        info('üì∑ [UPLOAD] ‚úÖ Bot√£o "Adicionar fotos" clicado com sucesso');
        await wait(1000);
      } else {
        info('üì∑ [UPLOAD] ‚ö†Ô∏è Bot√£o "Adicionar fotos" n√£o encontrado ou n√£o vis√≠vel');
      }

      // Estrat√©gia 2: Procurar input de arquivo
      info('üì∑ [UPLOAD] üîç Estrat√©gia 2: Procurando campo de input de arquivo...');
      
      const fileInputStrategies = [
        // Input direto
        () => this.page.locator('input[type="file"][accept*="image"]').first(),
        () => this.page.locator('input[type="file"]').first(),
        // Input dentro de elementos espec√≠ficos
        () => this.page.locator('[data-testid*="photo"] input[type="file"]').first(),
        () => this.page.locator('[aria-label*="foto"] input[type="file"]').first(),
        () => this.page.locator('[aria-label*="photo"] input[type="file"]').first(),
        // Input oculto que pode estar em qualquer lugar
        () => this.page.locator('input[type="file"][multiple]').first(),
      ];

      const strategyNames = [
        'input[type="file"][accept*="image"]',
        'input[type="file"]',
        '[data-testid*="photo"] input[type="file"]',
        '[aria-label*="foto"] input[type="file"]',
        '[aria-label*="photo"] input[type="file"]',
        'input[type="file"][multiple]'
      ];

      let uploadSuccess = false;
      info(`üì∑ [UPLOAD] Testando ${fileInputStrategies.length} estrat√©gias de input de arquivo...`);
      
      for (let i = 0; i < fileInputStrategies.length; i++) {
        try {
          info(`üì∑ [UPLOAD] üîÑ Testando estrat√©gia ${i + 1}/${fileInputStrategies.length}: ${strategyNames[i]}`);
          const strategy = fileInputStrategies[i];
          if (!strategy) {
            warn(`üì∑ [UPLOAD] ‚ùå Estrat√©gia ${i + 1} n√£o definida`);
            continue;
          }
          const fileInput = strategy();
          
          // Verificar se o input existe (mesmo que n√£o esteja vis√≠vel)
          const inputCount = await fileInput.count();
          info(`üì∑ [UPLOAD] Inputs encontrados com estrat√©gia ${i + 1}: ${inputCount}`);
          
          if (inputCount > 0) {
            info(`üì∑ [UPLOAD] ‚úÖ Input de arquivo encontrado (estrat√©gia ${i + 1}: ${strategyNames[i]})`);
            
            const resolvedPaths = validPaths.map(p => path.resolve(p));
            info(`üì∑ [UPLOAD] üì§ Enviando ${resolvedPaths.length} arquivos...`);
            info(`üì∑ [UPLOAD] üì§ Caminhos absolutos: ${resolvedPaths.join(', ')}`);
            
            // Usar setInputFiles que funciona mesmo com inputs ocultos
            info(`üì∑ [UPLOAD] üîÑ Executando setInputFiles...`);
            await fileInput.setInputFiles(resolvedPaths);
            info(`üì∑ [UPLOAD] ‚úÖ setInputFiles executado com sucesso`);
            
            // Aguardar mais tempo para o upload processar
            await waitWithLog(3000, 'üì∑ [UPLOAD] Aguardando processamento das imagens');
            
            // Verificar se as imagens foram carregadas
            info(`üì∑ [UPLOAD] üîÑ Aguardando finaliza√ß√£o do upload...`);
            await wait(2000);
            
            info(`üì∑ [UPLOAD] ‚úÖ Upload realizado com sucesso: ${validPaths.length} imagens (estrat√©gia ${i + 1})`);
            uploadSuccess = true;
            break;
          } else {
            info(`üì∑ [UPLOAD] ‚ö†Ô∏è Estrat√©gia ${i + 1} n√£o encontrou inputs`);
          }
        } catch (err) {
          warn(`üì∑ [UPLOAD] ‚ùå Estrat√©gia ${i + 1} falhou:`, err);
        }
      }

      if (!uploadSuccess) {
        info(`üì∑ [UPLOAD] ‚ö†Ô∏è Todas as ${fileInputStrategies.length} estrat√©gias falharam`);
        
        // √öltima tentativa: for√ßar input em qualquer elemento file
        try {
          info('üì∑ [UPLOAD] üîÑ Tentativa final: procurando qualquer input de arquivo...');
          const anyFileInput = this.page.locator('input[type="file"]');
          const count = await anyFileInput.count();
          info(`üì∑ [UPLOAD] Total de inputs de arquivo encontrados na p√°gina: ${count}`);
          
          if (count > 0) {
            info(`üì∑ [UPLOAD] ‚úÖ Encontrados ${count} inputs de arquivo, tentando o primeiro...`);
            const resolvedPaths = validPaths.map(p => path.resolve(p));
            info(`üì∑ [UPLOAD] üì§ Tentativa final com ${resolvedPaths.length} arquivos`);
            
            await anyFileInput.first().setInputFiles(resolvedPaths);
            info(`üì∑ [UPLOAD] ‚úÖ setInputFiles executado na tentativa final`);
            
            await waitWithLog(3000, 'üì∑ [UPLOAD] Aguardando processamento das imagens (tentativa final)');
            info(`üì∑ [UPLOAD] ‚úÖ Upload realizado (tentativa final): ${validPaths.length} imagens`);
            uploadSuccess = true;
          } else {
            warn('üì∑ [UPLOAD] ‚ùå Nenhum campo de upload de imagens encontrado na p√°gina');
            warn('üì∑ [UPLOAD] ‚ùå Continuando sem imagens - nenhum input de arquivo dispon√≠vel');
          }
        } catch (finalErr) {
          warn('üì∑ [UPLOAD] ‚ùå Falha na tentativa final de upload:', finalErr);
        }
      }
      
      // Log final do resultado
      if (uploadSuccess) {
        info(`üì∑ [UPLOAD] üéâ SUCESSO: Upload de ${validPaths.length} imagens conclu√≠do`);
      } else {
        warn(`üì∑ [UPLOAD] ‚ùå FALHA: N√£o foi poss√≠vel fazer upload das imagens`);
        warn(`üì∑ [UPLOAD] ‚ùå Continuando cria√ß√£o do an√∫ncio sem imagens`);
      }
      
    } catch (err) {
      error('üì∑ [UPLOAD] ‚ùå ERRO CR√çTICO durante upload de imagens:', err);
      warn('üì∑ [UPLOAD] ‚ùå Continuando sem imagens devido ao erro cr√≠tico');
    }
  }

  /**
   * Mapeamento de categorias do painel para textos do Facebook Marketplace
   */
  private getCategoryDisplayName(category: string): string {
    const categoryMap: Record<string, string> = {
      'tools': 'Ferramentas',
      'electronics': 'Eletr√¥nicos',
      'clothing': 'Roupas',
      'home': 'Casa e jardim',
      'sports': 'Esportes',
      'vehicles': 'Ve√≠culos',
      'books': 'Livros',
      'toys': 'Brinquedos',
      'music': 'M√∫sica',
      'other': 'Outros'
    };
    
    return categoryMap[category] || category;
  }

  /**
   * Seleciona categoria do produto
   */
  private async selectCategory(category: string): Promise<void> {
    const displayCategory = this.getCategoryDisplayName(category);
    info(`üîç Iniciando sele√ß√£o de categoria: ${category} -> ${displayCategory}`);
    
    try {
      // Passo 1: Encontrar e clicar no bot√£o "Categoria" para abrir o dropdown
      info('üéØ Passo 1: Procurando bot√£o "Categoria" para abrir dropdown...');
      
      const categoryButtonStrategies = [
        // Estrat√©gia que funciona: Label com role combobox contendo "Categoria"
        () => this.page.locator('label[role="combobox"]').filter({ hasText: 'Categoria' })
      ];

      let categoryButtonClicked = false;
      
      try {
        info(`üîÑ Clicando no bot√£o "Categoria"...`);
        const strategy = categoryButtonStrategies[0];
        if (!strategy) throw new Error('Estrat√©gia n√£o definida');
        
        const categoryButton = strategy();
        
        if (await categoryButton.isVisible({ timeout: 3000 })) {
          await categoryButton.scrollIntoViewIfNeeded();
          await wait(100);
          await wait(300);
          await categoryButton.click();
          info(`‚úÖ Bot√£o "Categoria" clicado com sucesso`);
          categoryButtonClicked = true;
        }
      } catch (err) {
        warn(`‚ö†Ô∏è Falha ao clicar no bot√£o "Categoria":`, err);
      }
      
      if (!categoryButtonClicked) {
        throw new Error('N√£o foi poss√≠vel encontrar ou clicar no bot√£o "Categoria"');
      }
      
      // Passo 2: Aguardar dropdown abrir e selecionar a categoria desejada
      info(`üéØ Passo 2: Aguardando dropdown abrir e procurando categoria "${displayCategory}"...`);
      await wait(1000); // Aguardar dropdown abrir

      const categoryOptionStrategies = [
        // Estrat√©gia que funciona: Texto exato da categoria
        () => this.page.getByText(displayCategory, { exact: true })
      ];

      let categorySelected = false;

      try {
        info(`üîÑ Selecionando categoria "${displayCategory}"...`);
        const strategy = categoryOptionStrategies[0];
        if (!strategy) throw new Error('Estrat√©gia n√£o definida');

        const categoryOption = strategy();

        if (await categoryOption.isVisible({ timeout: 3000 })) {
          // N√£o fazer scroll para evitar que a categoria saia da view em dropdowns
          // await categoryOption.scrollIntoViewIfNeeded();
          
          // Tentar hover primeiro para garantir que est√° acess√≠vel
          try {
            await categoryOption.hover();
            await wait(200);
          } catch (hoverErr) {
            debug('Hover falhou, tentando click direto');
          }
          
          await wait(100);
          await categoryOption.click();
          info(`‚úÖ Categoria "${displayCategory}" selecionada com sucesso`);
          categorySelected = true;
        }
      } catch (err) {
        warn(`‚ö†Ô∏è Falha ao selecionar categoria "${displayCategory}":`, err);
      }

      if (!categorySelected) {
        warn(`‚ö†Ô∏è N√£o foi poss√≠vel selecionar a categoria "${displayCategory}" no dropdown`);
      }
      
      await wait(500); // Aguardar sele√ß√£o ser processada
      
    } catch (err) {
      error('Erro ao selecionar categoria:', err);
      throw err;
    }
  }

  /**
   * Seleciona condi√ß√£o do produto
   */
  private async selectCondition(condition: string): Promise<void> {
    info(`üîç Iniciando sele√ß√£o de condi√ß√£o: ${condition}`);
    
    try {
      // Passo 1: Encontrar e clicar no combobox "Condi√ß√£o" para abrir o dropdown
      info('üéØ Passo 1: Procurando combobox "Condi√ß√£o" para abrir dropdown...');
      
      const conditionCombobox = this.page.getByRole('combobox', { name: 'Condi√ß√£o' });
      
      if (await conditionCombobox.isVisible({ timeout: 3000 })) {
        await conditionCombobox.scrollIntoViewIfNeeded();
        await wait(100);
        await conditionCombobox.click();
        info(`‚úÖ Combobox "Condi√ß√£o" clicado com sucesso`);
        
        // Passo 2: Aguardar dropdown abrir e selecionar "Novo"
        info('üéØ Passo 2: Aguardando dropdown abrir e procurando condi√ß√£o "Novo"...');
        await wait(1000);
        
        info(`üîÑ Selecionando condi√ß√£o "Novo"...`);
        const novoOption = this.page.getByRole('option', { name: 'Novo', exact: true }).locator('div').first();
        
        if (await novoOption.isVisible({ timeout: 2000 })) {
          await novoOption.click();
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s selecionar condi√ß√£o');
          info(`‚úÖ Condi√ß√£o "Novo" selecionada com sucesso`);
        } else {
          throw new Error('Op√ß√£o "Novo" n√£o encontrada no dropdown');
        }
      } else {
        throw new Error('Combobox "Condi√ß√£o" n√£o encontrado');
      }
    } catch (err) {
      warn('N√£o foi poss√≠vel selecionar condi√ß√£o:', err);
    }
  }

  /**
   * Seleciona disponibilidade do produto
   */
  private async selectAvailability(): Promise<void> {
    debug('Configurando disponibilidade do produto...');
    
    try {
      // Usar seletor espec√≠fico para disponibilidade
      const availabilityCombobox = this.page.getByRole('combobox', { name: 'Disponibilidade' });
      
      if (await availabilityCombobox.isVisible({ timeout: 3000 })) {
        await availabilityCombobox.locator('div').nth(2).click();
        await wait(500);
        
        // Selecionar "Em estoque" como disponibilidade padr√£o
        const emEstoqueOption = this.page.getByLabel('Selecione uma op√ß√£o').getByText('Anunciar como Em estoque');
        if (await emEstoqueOption.isVisible({ timeout: 2000 })) {
          await emEstoqueOption.click();
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s selecionar disponibilidade');
          info('Disponibilidade selecionada: Em estoque');
        }
      }
    } catch (err) {
      warn('N√£o foi poss√≠vel selecionar disponibilidade:', err);
    }
  }

  /**
   * Seleciona localiza√ß√£o do produto
   */
  private async selectLocation(location: string): Promise<void> {
    debug(`Configurando localiza√ß√£o: ${location}`);
    
    try {
      // Aguardar um pouco mais para garantir que a p√°gina carregou completamente
      await wait(1000);
      
      // Usar seletor espec√≠fico para localiza√ß√£o
      const locationCombobox = this.page.getByRole('combobox', { name: 'Localiza√ß√£o' });
      
      if (await locationCombobox.isVisible({ timeout: 5000 })) {
        // Garantir que o elemento est√° vis√≠vel e interag√≠vel
        await locationCombobox.scrollIntoViewIfNeeded();
        await wait(500);
        
        // Clicar no combobox
        await locationCombobox.click();
        await wait(1000); // Wait maior para modo headless
        
        // Digitar a localiza√ß√£o fornecida pelo usu√°rio
        await locationCombobox.fill(location);
        await wait(1000); // Aguardar sugest√µes aparecerem
        
        // Tentar selecionar a primeira op√ß√£o da lista de sugest√µes
        const firstOption = this.page.locator('[role="option"]').first();
        if (await firstOption.isVisible({ timeout: 3000 })) {
          await firstOption.click();
          await waitWithLog(this.throttleMs, 'Aguardando ap√≥s selecionar localiza√ß√£o');
          info(`Localiza√ß√£o selecionada: ${location}`);
        } else {
          // Se n√£o houver sugest√µes, manter o texto digitado
          info(`Localiza√ß√£o digitada: ${location}`);
        }
      } else {
        warn('Combobox de localiza√ß√£o n√£o encontrado');
      }
    } catch (err) {
      warn('N√£o foi poss√≠vel selecionar localiza√ß√£o:', err);
    }
  }

  /**
   * Publica o an√∫ncio
   */
  async publish(): Promise<void> {
    try {
      info('üì§ Iniciando processo de publica√ß√£o...');
      
      // Passo 1: Clicar em "Avan√ßar" para ir para a tela de publica√ß√£o
      info('üéØ Passo 1: Procurando bot√£o "Avan√ßar"...');
      const advanceButton = this.page.getByRole('button', { name: 'Avan√ßar' });
      
      if (await advanceButton.isVisible({ timeout: 5000 })) {
        await advanceButton.scrollIntoViewIfNeeded();
        await wait(100);
        await advanceButton.click();
        await waitWithLog(2000, 'Aguardando p√°gina de publica√ß√£o carregar');
        info('‚úÖ Bot√£o "Avan√ßar" clicado com sucesso');
      } else {
        throw new Error('Bot√£o "Avan√ßar" n√£o encontrado');
      }
      
      // Passo 2: Aguardar p√°gina de confirma√ß√£o carregar e procurar bot√£o "Publicar"
      info('üéØ Passo 2: Procurando bot√£o "Publicar" na p√°gina de confirma√ß√£o...');
      await wait(2000); // Aguardar p√°gina carregar
      
      const publishStrategies = [
        // Bot√µes espec√≠ficos de publicar
        () => this.page.getByRole('button', { name: 'Publicar' }),
        () => this.page.getByRole('button', { name: 'Publish' }),
        () => this.page.getByText('Publicar', { exact: true }),
        () => this.page.getByText('Publish', { exact: true }),
        // Bot√µes mais gen√©ricos mas excluindo patroc√≠nio
        () => this.page.locator('button').filter({ hasText: /^Publicar$/ }),
        () => this.page.locator('button').filter({ hasText: /^Publish$/ }),
        // Estrat√©gia com seletor mais amplo
        () => this.page.locator('button:has-text("Publicar"):not(:has-text("Patrocin")):not(:has-text("Promov"))'),
        () => this.page.locator('button:has-text("Publish"):not(:has-text("Sponsor")):not(:has-text("Promot"))'),
      ];

      let publishSuccess = false;
      
      for (let i = 0; i < publishStrategies.length; i++) {
        try {
          const strategy = publishStrategies[i];
          if (!strategy) continue;
          const publishButton = strategy();
          
          if (await publishButton.isVisible({ timeout: 3000 })) {
            info(`‚úÖ Bot√£o "Publicar" encontrado (estrat√©gia ${i + 1})`);
            await publishButton.scrollIntoViewIfNeeded();
            await wait(100);
            await publishButton.click();
            await waitWithLog(3000, 'Aguardando confirma√ß√£o final de publica√ß√£o');
            info('‚úÖ Bot√£o "Publicar" clicado com sucesso');
            publishSuccess = true;
            break;
          }
        } catch (err) {
          debug(`Estrat√©gia de publica√ß√£o ${i + 1} falhou:`, err);
        }
      }
      
      if (!publishSuccess) {
        // Verificar se j√° foi publicado automaticamente
        await wait(2000);
        const isPublished = await this.checkIfPublished();
        if (isPublished) {
          info('‚úÖ An√∫ncio foi publicado automaticamente ap√≥s clicar em "Avan√ßar"');
        } else {
          throw new Error('Bot√£o "Publicar" n√£o encontrado e an√∫ncio n√£o foi publicado automaticamente');
        }
      }
      
      info('üéâ Processo de publica√ß√£o conclu√≠do');
      
    } catch (err) {
      error('‚ùå Erro ao publicar an√∫ncio:', err);
      throw new Error(`Falha na publica√ß√£o: ${err}`);
    }
  }
  
  /**
   * Verifica se o an√∫ncio foi publicado com sucesso
   */
  private async checkIfPublished(): Promise<boolean> {
    try {
      const publishedIndicators = [
        this.page.getByText('An√∫ncio publicado'),
        this.page.getByText('Ad published'),
        this.page.getByText('Publicado com sucesso'),
        this.page.getByText('Published successfully'),
        this.page.getByText('Seu an√∫ncio foi publicado'),
        this.page.getByText('Your ad has been published'),
        this.page.locator('[data-testid*="success"]'),
        this.page.locator('.success'),
      ];
      
      for (const indicator of publishedIndicators) {
        if (await indicator.isVisible({ timeout: 1000 })) {
          return true;
        }
      }
      
      return false;
    } catch {
      return false;
    }
  }

  /**
   * Verifica se h√° erros no formul√°rio
   */
  async checkForErrors(): Promise<string[]> {
    const errors: string[] = [];
    
    try {
      // Procurar mensagens de erro comuns
      const errorSelectors = [
        '[role="alert"]',
        '.error',
        '[data-testid*="error"]',
        'div[style*="color: red"]',
        'span[style*="color: red"]'
      ];

      for (const selector of errorSelectors) {
        const errorElements = await this.page.locator(selector).all();
        for (const element of errorElements) {
          const text = await element.textContent();
          if (text && text.trim()) {
            errors.push(text.trim());
          }
        }
      }
    } catch (err) {
      debug('Erro ao verificar mensagens de erro:', err);
    }

    return errors;
  }

  /**
   * Aguarda o formul√°rio estar pronto para preenchimento
   */
  async waitForForm(timeout: number = 10000): Promise<void> {
    debug('Aguardando formul√°rio estar pronto...');
    
    try {
      // Aguardar pelo menos um campo principal estar vis√≠vel
      await this.page.waitForFunction(() => {
        const titleSelectors = ['input[name*="title"]', 'textarea[name*="title"]'];
        const priceSelectors = ['input[name*="price"]', 'input[type="number"]'];
        
        const hasTitle = titleSelectors.some(sel => document.querySelector(sel));
        const hasPrice = priceSelectors.some(sel => document.querySelector(sel));
        
        return hasTitle || hasPrice;
      }, { timeout });
      
      debug('Formul√°rio pronto para preenchimento');
    } catch (err) {
      throw new Error(`Timeout aguardando formul√°rio: ${err}`);
    }
  }
}

/**
 * Fun√ß√£o utilit√°ria para criar an√∫ncio completo
 */
export async function createListing(
  ctx: BrowserContext, 
  startUrl: string, 
  data: ListingData,
  throttleMs: number = 350
): Promise<Page> {
  const page = await ctx.newPage();
  
  try {
    await page.goto(startUrl, { waitUntil: 'domcontentloaded' });
    
    const automation = new MarketplaceAutomation(page, throttleMs);
    await automation.waitForForm();
    await automation.createListing(data);
    
    return page;
  } catch (err) {
    await page.close();
    throw err;
  }
}

/**
 * Fun√ß√£o utilit√°ria para publicar an√∫ncio
 */
export async function publish(page: Page, throttleMs: number = 350): Promise<void> {
  const automation = new MarketplaceAutomation(page, throttleMs);
  await automation.publish();
}