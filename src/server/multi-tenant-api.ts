import express from 'express';
import cors from 'cors';
import crypto from 'crypto';
import path from 'path';
import fs from 'fs/promises';
import { info, warn, error } from '../logger.js';
import { validateSessionData, saveSessionData } from '../utils/sessionHandler.js';
import { convertExtensionSessionToPlaywright } from '../utils/extensionSessionConverter.js';
import { VendaBoostAutomation } from '../index.js';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
  origin: true,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-User-Token']
}));
app.use(express.json({ limit: '10mb' }));

// Banco de dados em mem√≥ria (em produ√ß√£o, use PostgreSQL/MongoDB)
interface UserSession {
  userId: string;
  userToken: string;
  facebookId: string;
  facebookName: string;
  sessionData: any;
  lastUpdate: string;
  automationStatus: 'idle' | 'running' | 'completed' | 'error';
  automationQueue: any[];
}

const userSessions = new Map<string, UserSession>();
const activeAutomations = new Map<string, any>();

/**
 * Middleware para autentica√ß√£o do usu√°rio
 */
async function authenticateUser(req: any, res: any, next: any): Promise<void> {
  const userToken = req.headers['x-user-token'];
  
  if (!userToken) {
    return res.status(401).json({ 
      success: false, 
      error: 'Token de usu√°rio n√£o fornecido' 
    });
  }
  
  // Verificar se o token existe
  const session = Array.from(userSessions.values())
    .find(s => s.userToken === userToken);
  
  if (!session) {
    return res.status(401).json({ 
      success: false, 
      error: 'Token inv√°lido ou sess√£o expirada' 
    });
  }
  
  req.userSession = session;
  next();
}

/**
 * 1. REGISTRO DE NOVO USU√ÅRIO
 * Quando algu√©m se cadastra no seu site
 */
app.post('/api/users/register', async (req: any, res: any): Promise<void> => {
  try {
    const { email, name } = req.body;
    
    // Gerar token √∫nico para o usu√°rio
    const userToken = crypto.randomBytes(32).toString('hex');
    const userId = crypto.randomBytes(16).toString('hex');
    
    // Criar sess√£o vazia para o usu√°rio
    const newSession: UserSession = {
      userId,
      userToken,
      facebookId: '',
      facebookName: '',
      sessionData: null,
      lastUpdate: new Date().toISOString(),
      automationStatus: 'idle',
      automationQueue: []
    };
    
    userSessions.set(userId, newSession);
    
    // Retornar token para o usu√°rio salvar na extens√£o
    return res.json({
      success: true,
      userId,
      userToken,
      extensionConfig: {
        serverUrl: `${req.protocol}://${req.get('host')}`,
        endpoint: '/api/extension/session',
        headers: {
          'X-User-Token': userToken
        }
      },
      message: 'Usu√°rio registrado. Configure a extens√£o com o token fornecido.'
    });
    
  } catch (err) {
    error('Erro ao registrar usu√°rio:', err);
    return res.status(500).json({ 
      success: false, 
      error: 'Erro ao registrar usu√°rio' 
    });
  }
});

/**
 * 2. RECEBER DADOS DA EXTENS√ÉO
 * A extens√£o envia os dados do Facebook aqui
 */
app.post('/api/extension/session', authenticateUser, async (req: any, res: any): Promise<void> => {
  try {
    const userSession = req.userSession as UserSession;
    const sessionData = req.body;
    
    info(`üì• Dados recebidos do usu√°rio ${userSession.userId} (Facebook: ${sessionData.userInfo?.name})`);
    
    // Validar dados da sess√£o
    const validation = validateSessionData(sessionData);
    if (!validation.isValid) {
      return res.status(400).json({
        success: false,
        error: 'Dados de sess√£o inv√°lidos',
        details: validation.errors
      });
    }
    
    // Atualizar sess√£o do usu√°rio
    userSession.facebookId = sessionData.userId;
    userSession.facebookName = sessionData.userInfo?.name || '';
    userSession.sessionData = sessionData;
    userSession.lastUpdate = new Date().toISOString();
    
    // Salvar em arquivo individual para o usu√°rio
    const userDir = path.join('data', 'users', userSession.userId);
    await fs.mkdir(userDir, { recursive: true });
    
    const sessionFile = path.join(userDir, 'facebook-session.json');
    await fs.writeFile(sessionFile, JSON.stringify(sessionData, null, 2));
    
    // Converter para formato Playwright
    const playwrightFile = path.join(userDir, 'playwright-session.json');
    await convertExtensionSessionToPlaywright(sessionFile, playwrightFile);
    
    info(`‚úÖ Sess√£o salva para usu√°rio ${userSession.userId}`);
    
    return res.json({
      success: true,
      message: 'Sess√£o do Facebook atualizada com sucesso',
      userData: {
        userId: userSession.userId,
        facebookId: userSession.facebookId,
        facebookName: userSession.facebookName,
        lastUpdate: userSession.lastUpdate
      }
    });
    
  } catch (err) {
    error('Erro ao processar sess√£o:', err);
    return res.status(500).json({ 
      success: false, 
      error: 'Erro ao processar sess√£o' 
    });
  }
});

/**
 * 3. CRIAR AUTOMA√á√ÉO
 * Usu√°rio solicita uma automa√ß√£o no site
 */
app.post('/api/automation/create', authenticateUser, async (req: any, res: any): Promise<void> => {
  try {
    const userSession = req.userSession as UserSession;
    const { flowData, groupNames } = req.body;
    
    // Verificar se usu√°rio tem sess√£o do Facebook
    if (!userSession.sessionData) {
      return res.status(400).json({
        success: false,
        error: 'Voc√™ precisa conectar sua conta do Facebook primeiro'
      });
    }
    
    // Verificar se j√° tem automa√ß√£o rodando
    if (userSession.automationStatus === 'running') {
      return res.status(400).json({
        success: false,
        error: 'Voc√™ j√° tem uma automa√ß√£o em andamento'
      });
    }
    
    // Adicionar √† fila
    const automationId = crypto.randomBytes(16).toString('hex');
    const automation = {
      id: automationId,
      userId: userSession.userId,
      flowData,
      groupNames: groupNames || [],
      status: 'queued',
      createdAt: new Date().toISOString()
    };
    
    userSession.automationQueue.push(automation);
    
    // Processar automa√ß√£o em background
    processUserAutomation(userSession, automation);
    
    return res.json({
      success: true,
      automationId,
      message: 'Automa√ß√£o criada e adicionada √† fila',
      position: userSession.automationQueue.length
    });
    
  } catch (err) {
    error('Erro ao criar automa√ß√£o:', err);
    return res.status(500).json({ 
      success: false, 
      error: 'Erro ao criar automa√ß√£o' 
    });
  }
});

/**
 * 4. STATUS DA AUTOMA√á√ÉO
 * Verificar o progresso da automa√ß√£o
 */
app.get('/api/automation/status/:automationId', authenticateUser, async (req: any, res: any): Promise<void> => {
  try {
    const userSession = req.userSession as UserSession;
    const { automationId } = req.params;
    
    // Buscar automa√ß√£o
    const automation = userSession.automationQueue.find(a => a.id === automationId);
    
    if (!automation) {
      return res.status(404).json({
        success: false,
        error: 'Automa√ß√£o n√£o encontrada'
      });
    }
    
    return res.json({
      success: true,
      automation: {
        id: automation.id,
        status: automation.status,
        createdAt: automation.createdAt,
        completedAt: automation.completedAt,
        result: automation.result
      }
    });
    
  } catch (err) {
    error('Erro ao buscar status:', err);
    return res.status(500).json({ 
      success: false, 
      error: 'Erro ao buscar status' 
    });
  }
});

/**
 * 5. HIST√ìRICO DO USU√ÅRIO
 */
app.get('/api/user/history', authenticateUser, async (req: any, res: any): Promise<void> => {
  try {
    const userSession = req.userSession as UserSession;
    
    return res.json({
      success: true,
      userData: {
        userId: userSession.userId,
        facebookId: userSession.facebookId,
        facebookName: userSession.facebookName,
        lastSessionUpdate: userSession.lastUpdate,
        automationStatus: userSession.automationStatus,
        totalAutomations: userSession.automationQueue.length,
        recentAutomations: userSession.automationQueue.slice(-10)
      }
    });
    
  } catch (err) {
    error('Erro ao buscar hist√≥rico:', err);
    return res.status(500).json({ 
      success: false, 
      error: 'Erro ao buscar hist√≥rico' 
    });
  }
});

/**
 * Processar automa√ß√£o do usu√°rio (em background)
 */
async function processUserAutomation(userSession: UserSession, automation: any) {
  try {
    // Marcar como rodando
    userSession.automationStatus = 'running';
    automation.status = 'running';
    
    info(`ü§ñ Iniciando automa√ß√£o ${automation.id} para usu√°rio ${userSession.userId}`);
    
    // Carregar sess√£o do usu√°rio
    const userDir = path.join('data', 'users', userSession.userId);
    const sessionFile = path.join(userDir, 'playwright-session.json');
    
    // Criar inst√¢ncia isolada da automa√ß√£o
    const vendaBoost = new VendaBoostAutomation();
    
    // Configurar para usar a sess√£o espec√≠fica do usu√°rio
    const result = await vendaBoost.runFlow({
      flowData: automation.flowData,
      groupNames: automation.groupNames,
      config: {
        extensionSession: sessionFile,
        headless: true, // Sempre headless no servidor
        throttleMs: 500
      }
    });
    
    // Salvar resultado
    automation.status = result.success ? 'completed' : 'error';
    automation.completedAt = new Date().toISOString();
    automation.result = result;
    
    userSession.automationStatus = 'idle';
    
    info(`‚úÖ Automa√ß√£o ${automation.id} conclu√≠da para usu√°rio ${userSession.userId}`);
    
    // Notificar usu√°rio (webhook, email, etc)
    await notifyUser(userSession, automation);
    
  } catch (err) {
    error(`Erro na automa√ß√£o ${automation.id}:`, err);
    automation.status = 'error';
    automation.error = err instanceof Error ? err.message : 'Erro desconhecido';
    userSession.automationStatus = 'idle';
  }
}

/**
 * Notificar usu√°rio sobre conclus√£o
 */
async function notifyUser(userSession: UserSession, automation: any) {
  // Implementar:
  // - Envio de email
  // - Webhook
  // - Push notification
  // - WebSocket em tempo real
  info(`üìß Notificando usu√°rio ${userSession.userId} sobre automa√ß√£o ${automation.id}`);
}

/**
 * Limpar sess√µes antigas (executar periodicamente)
 */
setInterval(() => {
  const now = Date.now();
  const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 dias
  
  for (const [userId, session] of userSessions.entries()) {
    const sessionAge = now - new Date(session.lastUpdate).getTime();
    if (sessionAge > maxAge) {
      userSessions.delete(userId);
      info(`üóëÔ∏è Sess√£o expirada removida: ${userId}`);
    }
  }
}, 24 * 60 * 60 * 1000); // Executar diariamente

// Iniciar servidor
app.listen(PORT, () => {
  info(`üöÄ API Multi-tenant rodando na porta ${PORT}`);
  info(`üì¶ Endpoints dispon√≠veis:`);
  info(`  - POST /api/users/register`);
  info(`  - POST /api/extension/session`);
  info(`  - POST /api/automation/create`);
  info(`  - GET  /api/automation/status/:id`);
  info(`  - GET  /api/user/history`);
});

export default app;