# =======================================================
# VARIÁVEIS DE AMBIENTE PARA RENDER - VENDABOOST
# =======================================================

# Configurações básicas
EXTENSION_SESSION_NAME=vendaboost-session-2025-08-18T17-27-36.json
TZ=America/Sao_Paulo
CHROME_NO_SANDBOX=1
CHROME_DEVSHM_FIX=1
HEADLESS=true

# Dados codificados em Base64
FLOW_B64=ewogICJ0aXRsZSI6ICJOb3RlYm9vayBHYW1lciBSVFggMzA2MCAtIDE2R0IgUkFNIiwKICAicHJpY2UiOiA0MjAwLAogICJkZXNjcmlwdGlvbiI6ICJOb3RlYm9vayBnYW1lciBlbSDDg8KzdGltbyBlc3RhZG8sIFJUWCAzMDYwLCA1MTJHQiBTU0QsIGFjb21wYW5oYSBjYXJyZWdhZG9yIG9yaWdpbmFsLiBJZGVhbCBwYXJhIGpvZ29zIGUgdHJhYmFsaG8gcGVzYWRvLiIsCiAgImNhdGVnb3J5IjogIkZlcnJhbWVudGFzIiwKICAiY29uZGl0aW9uIjogIk5vdm8iLAogICJpbWFnZXMiOiBbCiAgICAiLi9pbWFnZW0tcG9zdC5wbmciCiAgXSwKICAiZ3JvdXBzIjogWwogICAgIkNvbXByYSBlIFZlbmRhIENpZGFkZSBYIiwKICAgICJDbGFzc2lmaWNhZG9zIGRhIFJlZ2nDg8KjbyBZIiwKICAgICJPZmVydGFzIENpZGFkZSBaIgogIF0KfQ==

GROUPS_B64=Q29tcHJhIGUgVmVuZGEgLSBTw4PCo28gUGF1bG8KQ2xhc3NpZmljYWRvcyBkYSBSZWdpw4PCo28gU3VsCk9mZXJ0YXMgZSBQcm9tb8ODwqfDg8K1ZXMgLSBSaW8gZGUgSmFuZWlybwpNYXJrZXRwbGFjZSBMb2NhbCAtIEJlbG8gSG9yaXpvbnRlClZlbmRhcyBPbmxpbmUgLSBCcmFzw4PCrWxpYQpOZWfDg8KzY2lvcyBlIE9wb3J0dW5pZGFkZXMgLSBTYWx2YWRvcg==

STORAGE_STATE_B64=

EXTENSION_SESSION_B64=ewogICJ0aW1lc3RhbXAiOiAiMjAyNS0wOC0xOFQxNzoyNzozNi41NTVaIiwKICAidXNlckFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMzkuMC4wLjAgU2FmYXJpLzUzNy4zNiIsCiAgImNvb2tpZXMiOiB7CiAgICAid2QiOiB7CiAgICAgICJ2YWx1ZSI6ICIxOTIweDkxMSIsCiAgICAgICJkb21haW4iOiAiLmZhY2Vib29rLmNvbSIsCiAgICAgICJwYXRoIjogIi8iLAogICAgICAic2VjdXJlIjogdHJ1ZSwKICAgICAgImh0dHBPbmx5IjogZmFsc2UsCiAgICAgICJzYW1lU2l0ZSI6ICJsYXgiLAogICAgICAiZXhwaXJhdGlvbkRhdGUiOiAxNzU2MTQyODUwCiAgICB9LAogICAgImNfdXNlciI6IHsKICAgICAgInZhbHVlIjogIjYxNTc4MTUxNDkxODY1IiwKICAgICAgImRvbWFpbiI6ICIuZmFjZWJvb2suY29tIiwKICAgICAgInBhdGgiOiAiLyIsCiAgICAgICJzZWN1cmUiOiB0cnVlLAogICAgICAiaHR0cE9ubHkiOiBmYWxzZSwKICAgICAgInNhbWVTaXRlIjogIm5vX3Jlc3RyaWN0aW9uIiwKICAgICAgImV4cGlyYXRpb25EYXRlIjogMTc4NzA3Mzg4Ni44NDc3NTEKICAgIH0sCiAgICAicHJlc2VuY2UiOiAiQyU3QiUyMnQzJTIyJTNBJTVCJTVEJTJDJTIydXRjMyUyMiUzQTE3NTU1MzgwNTA5MjMlMkMlMjJ2JTIyJTNBMSU3RCIsCiAgICAic2IiOiB7CiAgICAgICJ2YWx1ZSI6ICJrZnBoYUFZbzBVNzY3dDJXT1BaRF9xSWIiLAogICAgICAiZG9tYWluIjogIi5mYWNlYm9vay5jb20iLAogICAgICAicGF0aCI6ICIvIiwKICAgICAgInNlY3VyZSI6IHRydWUsCiAgICAgICJodHRwT25seSI6IHRydWUsCiAgICAgICJzYW1lU2l0ZSI6ICJub19yZXN0cmljdGlvbiIsCiAgICAgICJleHBpcmF0aW9uRGF0ZSI6IDE3OTAwOTc4ODYuODQ3OTE1CiAgICB9LAogICAgImRhdHIiOiB7CiAgICAgICJ2YWx1ZSI6ICJrZnBoYVBJSVUwRE5zOS1hZDNKSDNxY08iLAogICAgICAiZG9tYWluIjogIi5mYWNlYm9vay5jb20iLAogICAgICAicGF0aCI6ICIvIiwKICAgICAgInNlY3VyZSI6IHRydWUsCiAgICAgICJodHRwT25seSI6IHRydWUsCiAgICAgICJzYW1lU2l0ZSI6ICJub19yZXN0cmljdGlvbiIsCiAgICAgICJleHBpcmF0aW9uRGF0ZSI6IDE3ODU4MTE2MDQuMjgzNDAzCiAgICB9LAogICAgInhzIjogewogICAgICAidmFsdWUiOiAiNDklM0FWUnNKbk9nS3FPUC1sdyUzQTIlM0ExNzU1NTczODU0JTNBLTElM0EtMSIsCiAgICAgICJkb21haW4iOiAiLmZhY2Vib29rLmNvbSIsCiAgICAgICJwYXRoIjogIi8iLAogICAgICAic2VjdXJlIjogdHJ1ZSwKICAgICAgImh0dHBPbmx5IjogdHJ1ZSwKICAgICAgInNhbWVTaXRlIjogIm5vX3Jlc3RyaWN0aW9uIiwKICAgICAgImV4cGlyYXRpb25EYXRlIjogMTc4NzA3Mzg4Ni44NDc5NzkKICAgIH0sCiAgICAiZnIiOiB7CiAgICAgICJ2YWx1ZSI6ICIxeXU5Qkg5d0QycnFRN3I1Si5BV2Z5V3ozU2NIeFNjTkZuVzBIY0k1UXFoa3d0RG9vYWcxci1BSjhFdXN4UXE4djZmUHcuQm9vLUU1Li5BQUEuMC4wLkJvby04Qi5BV2MxREt5Q3Y2MlZtcnFmMklVcXJ1SzlWZUkiLAogICAgICAiZG9tYWluIjogIi5mYWNlYm9vay5jb20iLAogICAgICAicGF0aCI6ICIvIiwKICAgICAgInNlY3VyZSI6IHRydWUsCiAgICAgICJodHRwT25seSI6IHRydWUsCiAgICAgICJzYW1lU2l0ZSI6ICJub19yZXN0cmljdGlvbiIsCiAgICAgICJleHBpcmF0aW9uRGF0ZSI6IDE3NjMzMTQwNDkuMTY2MzY1CiAgICB9CiAgfSwKICAibG9jYWxTdG9yYWdlIjogewogICAgImFybWFkaWxsb19tc2dyX2RhdGFfbG9zc19zdGF0cyI6ICJ7fSIsCiAgICAiQ2FjaGVTdG9yYWdlVmVyc2lvbiI6ICIzYiIsCiAgICAibXdfZW5jcnlwdGVkX2JhY2t1cHNfcmVzdG9yZV91cHNlbGxfZmlyc3RfaW1wcmVzc2lvbl90aW1lX2tleSI6ICIxNzU1NTM3ODg3NTg1IiwKICAgICJTZXNzaW9uIjogIjNic3A4ZjoxNzU1NTU2MjQ1NDAzIiwKICAgICJfb3pfYmFuZHdpZHRoRXN0aW1hdGUiOiAiMTAwMDAwMDAiLAogICAgImJhbnphaTpsYXN0X3N0b3JhZ2VfZmx1c2giOiAiMTc1NTUzMjk3NjA3NC43IiwKICAgICJzY3JlZW5fdGltZV9wZXJpb2RfbG9nZ2luZ19mYWNlYm9vayI6ICJ7XCJhY3RvcklkXCI6XCI2MTU3ODE1MTQ5MTg2NVwiLFwiY3VycmVudEludGVydmFsTGFzdFRpY2tcIjoxNzU1NTM4MDQ1LFwiY3VycmVudEludGVydmFsU3RhcnRcIjoxNzU1NTM4MDMwLFwiaW5pdFJlbW90ZUFnZ1wiOntcInRpbWVzdGFtcFwiOjE3NTU1NzQwMDQsXCJ0b2RheV9zXCI6MH0sXCJpbnRlcnZhbHNcIjpbXSxcImxhc3RDYWxsYmFja0F0dGVtcHRcIjoxNzU1NTM4MDM0LFwibG9jYWxTdG9yYWdlSWRcIjpcIjU2NTU5NTE4XCIsXCJzeW5jZWRMMjRIU1wiOjE2NDU2LFwic3luY2VkVG9kYXlTXCI6MCxcImxhc3RTeW5jVGltZVN0YW1wXCI6MTc1NTUzODAzNH0iLAogICAgImxhc3RfaGVhZGxvYWRfdGltZSI6ICIxNzU1NTM4MDUwMDE0IiwKICAgICJSU1REYXRhIjogInt9IiwKICAgICJoYl90aW1lc3RhbXAiOiAiMTc1NTU1NDc0NjA1NCIsCiAgICAiYmR6X3BsYXliYWNrX3N0YXRlIjogIntcInNlc3Npb25fa2V5XCI6XCJtZTMzajFmelwiLFwiYnVmZmVyX2xlbmd0aFwiOjYwfSIsCiAgICAiX296X2JhbmR3aWR0aEFuZFRURkJTYW1wbGVzIjogIntcImJcIjpbXSxcInRcIjpbe1wic1wiOjE3NTUzNzY3MTU2ODAsXCJ0XCI6Mi45MDAwMDAwMDAzNzI1MjksXCJsXCI6MTI3LjY5OTk5OTk5OTI1NDk0LFwiYlwiOjE3NDg0fSx7XCJzXCI6MTc1NTM3NjcxNTcyOCxcInRcIjo0My43OTk5OTk5OTg4ODI0MSxcImxcIjo0NS4wOTk5OTk5OTk2Mjc0NyxcImJcIjoxNzQ4NH1dfSIsCiAgICAiYXJlc19sYXN0X3NpZ25hbF9mbHVzaCI6ICIxNzU0NjczODg4NTI3IiwKICAgICJzaWduYWxfZmx1c2hfdGltZXN0YW1wIjogIjE3NTU1NTQ2ODYwNjYiCiAgfSwKICAic2Vzc2lvblN0b3JhZ2UiOiB7CiAgICAic3BfcGkiOiAie1wicGFnZUluZm9cIjp7XCJzY3JpcHRQYXRoXCI6XCJYSW5kZXhSZWR1eENvbnRyb2xsZXJcIixcImNhdGVnb3J5VG9rZW5cIjpcImExZjNjNTEzXCIsXCJleHRyYURhdGFcIjp7XCJpbXBfaWRcIjpcIjBsRjB4T2lLbGN6NVBLYVk4XCIsXCJlZl9wYWdlXCI6bnVsbCxcInVyaVwiOlwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLz9zdHlwZT1sbyZmbG89MSZkZW9pYT0xJmpsb3U9QWZmNDIzTWlOTHlNNUIwQVY5dy0ybnY3TE5XbWo2Slk1ZVN1RV9lUnNVbHpIY3haSEtHT0tBX21hZkk5YTVmdjJWaWpWUHJLYVVhQjNOM2ZpbjR4MjVMYlpCaFdfV2VrWWlFY0p1QzlDNjBjNHcmc211aD02NTI0MCZsaD1BYzkwaU5wWUdsaWJNalA2QjFBXCJ9fSxcImNsaWNrUG9pbnRcIjpudWxsLFwidGltZVwiOjE3NTU1Mzc4ODcxMjR9IiwKICAgICJUYWJJZCI6ICI3bnA2ZXAiCiAgfSwKICAidXNlckluZm8iOiB7CiAgICAibmFtZSI6ICJOb3RpZmljYcODwqfDg8K1ZXMiLAogICAgInVzZXJJZCI6ICI2MTU3ODE1MTQ5MTg2NSIKICB9Cn0=

# =======================================================
# INSTRUÇÕES:
# 1. Copie todas as variáveis acima
# 2. Cole no painel de Environment Variables do Render
# 3. Deploy o Cron Job
# =======================================================
